---
layout: post
title: "mysql"
date: 2013-12-15 18:38
comments: true
categories: 
---
Gestor de bases de datos [BDs]. Las BDs se guardan en el directorio /var/lib/mysql/

>~$ mysqldump -u root -p proveedores > fichero.sql (Crear un backup de la BD "proveedores".)

>~$ mysql proveedores < fichero.sql (Restaurar la BD "proveedores" de un archivo)

>~$ mysqlimport -u root -p clientes fichero.sql (Otra forma de restaurar una BD si esta ya existe)

>~$ mysqldump -u root -p --all-databases > fichero.sql (Backup de todas las BDs)

>~$ mysqldump -u root -p --databases clientes proveedores > fichero.sql (Backup de dos BDs)

>~$ mysqldump -u root -p proveedores --ignore-table=antiguos > fichero.sql (Backup ignorando una tabla)

>~$ mysqldump -u root -p base_de_datos tabla1 tabla2 > tabla1_y_tabla2.sql (Exportar solo unas tablas de una BDs)

>~$ mysql -u root -p1234 (Acceder a la BD con el usuario "root" y contraseña "1234"[nótese que la contraseña está junto a la "p")

>~$ mysql -u root -p (Pedirá contraseña para acceder a la BD con el usuario "root")

>~$ mysql -u root -p datos (Entrar en mysql y directamente en la BD "datos" [notese que la BDs está separada de la "p" por un espacio, sinó se tomaría como la contraseña])

Una vez en el prompt de mysql [Todas las sentencias han de terminar con un punto y coma [;] menos la sentencia "USE"]:

mysql> SHOW VARIABLES LIKE 'datadir'; (muestra el directorio donde se almacenan las BDs)

mysql> show databases; (Mostrar las BDs existentes)

mysql> create database datos; (Crear la BD "datos")

mysql> DROP DATABASE datos; (Borrar toda una base de datos)

mysql> USE datos (Entrar en la BD "datos". Sin punto y coma final)

mysql> show tables; (Mostrar las tablas de la BD en la que se ha entrado)

mysql> DESCRIBE una_tabla (Mostrar los campos de una tabla concreta)

mysql> exit (Salir de mysql. Tambien con "quid" o Ctrl+d)

mysql> select version(), current_date; (Mostrar versión de mysql y fecha)

Modelo de creación de una tabla dentro de una BD mysql:

mysql> CREATE TABLE usuarios(

-> nombre VARCHAR(20), apellido VARCHAR(20),

-> profesión VARCHAR(20), sexo CHAR(1), nacimiento DATE,

-> antiguedad DATE);

VARCHAR(20) (Que los valores que se almacenarán son de longitud variable de hasta 20 caracteres)

CHAR(1) (Que el valor será fijo y solo tendrá un caracter)

DATE (En formato YYYY-MM-DD)

Para entrar datos en la tabla anterior, podemos crear un archivo de texto "usuarios.txt" que contenga un registro por línea con valores separados por tabuladores, cuidando que el orden de las columnas sea el mismo que utilizamos en la sentencia CREATE TABLE. Para valores que no conozcamos podemos usar valores nulos usando N. Ejemplo:

>~$ nano usuarios.txt

Juan	Borras	contable	m	1964-05-12	1988-03-27

Maria	Gil	administrativo	f	1983-10-03	2004-08-05

Antonio Gomez	portero		m	N		2006-11-01

Nota.- El final del archivo no ha de contener ninguna linea en blanco.

Para cargarlo en la BD:

mysql> LOAD DATA LOCAL INFILE "usuarios.txt" INTO TABLE datos;

Nota.- En caso de que salga el error: The used command is not allowed with this MySQL version:

# nano /etc/mysql/my.cnf

Y en la sección [mysql] añadir la linea "local-infile":

[mysql]

local-infile

Reinciar mysql.

LOAD DATA (Permite especificar cuál es el separador de columnas y el separador de registros. Por defecto el tabulador es el separador de columnas (campos) y el salto de línea es el separador de registros)

Para añadir un nuevo registro a la BD anterior:

mysql> INSERT INTO usuarios

-> VALUES('Jose','Robles','administrativo','m',NULL,'2012-12-01');

Valores y fechas entre comillas simples y valores desconocidos NULL y no N como entrando un archivo.

mysql> SELECT * FROM usuarios; (Ver toda la tabla para comprobar si se ha añadido el último registro)

Para modificar un registro puede realizarse borrando toda la tabla de datos y entrando nuevamente el archivo usuarios.txt si este está actualizado:

mysql> DELETE FROM usuarios;

mysql> LOAD DATA LOCAL INFILE "usuarios.txt" INTO TABLE usuarios;

O modificando solo el registro:

mysql> UPDATE usuarios SET nacimiento="1959-04-12"

WHERE apellido="Gomez";

mysql> SELECT * FROM usuarios WHERE apellido="Gomez"; (Verificar si se ha realizado la modificación)

mysql> SELECT * FROM usuarios WHERE nacimiento >= "1990-1-1"; (filtrar los que han nacido antes de la fecha indicada)

mysql> SELECT * FROM usuarios WHERE profesion="administrativo" AND sexo="f"; (filtrar los administrativos de sexo femenino)

mysql> SELECT * FROM usuarios WHERE profesion="portero" OR profesion="contable"; (filtrar porteros y contables)

mysql> SELECT * FROM usuarios WHERE (profesion="portero" AND sexo="f")

-> OR (nombre = "juan" AND sexo = "m"); (Filtrar distintas opciones encerradas entre parentesis)

mysql> SELECT apellido, nacimiento FROM usuarios;

mysql> SELECT antiguedad FROM usuarios; (Filtrar la columna "antiguedad")

mysql> SELECT nombre, nacimiento FROM usuarios ORDER BY nacimiento; (Ordenar por fecha nacimiento)

mysql> SELECT * FROM la_tabla ORDER BY la_columna; (Ordenar por el número de una columna)

mysql> drop table usuarios; (Eliminar una tabla)

mysql> drop table if exists usuarios; (Eliminar tabla si existe)

mysql> CHECK TABLE la_tabla EXTENDED; (Chequear la integridad de una tabla)

mysql> REPAIR TABLE la_tabla; (Reparar una tabla)

1.-

En ciertos casos, para resolver el error: mysqldump: Got error: xxxx: Table 'xxxxxxxxx' doesn't exist when using LOCK TABLES:

>~$ mysqldump -u root -p BDs --single-transaction > dump.sql

2.-

Otro sistema para importar una base de datos. Primero crearla, entrar en ella y ejecutar el source sobre el fichero sql:

mysql> CREATE DATABASE datos;

mysql> USE datos;

mysql> SOURCE datos.sql;

3.-

Exportar una tabla a txt con determinado formato:

mysql> SELECT * SELECT tabla INTO OUTFILE "tabla.txt"

--> FIELDS TERMINATED BY '   '

--> LINES TERMINATED BY 'nnr';

FIELDS TERMINATED BY '  ' (indica que los campos de cada línea terminarán con dos espacios.

LINES TERMINATED BY 'nnr '(indica el carácter como acaba cada linea, en este caso dos saltos de línea y retorno de carro

otras instrucciones de formato:

ENCLOSED BY '"' (Que los campos de tipo char, text, binary y enum de cada línea se entrecomillan)

IGNORE 1 LINES (No cargar la primera línea del fichero de texto)

LINES STARTING BY '---' (Que todas las líneas empiezen con "---".

4.-

Ejemplo parecido al anterior pero ordenando el fichero por el segundo campo:

mysql> SELECTC campo1,campo2,campo3 FROM tabla ORDER BY campo2 INTO OUTFILE "campos.txt"

--> FIELDS TERMINATED BY ' '

--> LINES TERMINATED BY 'nr';

5.-

Gestion de usuarios.

Cuando creamos un nuevo usuario en MySQL, éste queda identificado por su nombre de usuario más el nombre o IP del ordenador desde el cual hemos dicho que accederá (el carácter comodín '%' representa varios ordenadores).

Ejemplos:

juan

juan@'%'

juan@localhost

juan@'192.168.1.%'

juan@'%.dominio.org'

mysql> SELECT User,Host,Password FROM mysql.user; (Ver los usuarios)

mysql> CREATE USER juan@'%' IDENTIFIED BY '1234'; (Crear un usuario con la contraseña 1234)

mysql> CREATE USER john IDENTIFIED BY '1234', peter IDENTIFIED BY '4321'; (Crear dos usuarios)

mysql> RENAME USER john TO juan, peter TO pedro;

mysql> DROP USER juan, pedro; (Borrar dos usuarios)

mysql> SET PASSWORD FOR juan = PASSWORD('abcde') (Cambiar la contraseña de un usuario)

mysql> SHOW GRANTS FOR pedro; (Ver los privilegios de un usuario)

mysql> GRANT ALL ON *.* TO juan@localhost (Otorgar todos los privilegios a un usuario)

mysql> REVOKE ALL ON *.* FROM juan@localhost; (Anular todos los privilegios de un usuario)

6.-

Acceso remoto a mysql con el usuario root:

>~# nano /etc/mysql/my.cnf

Comentar la linea:

#bind-address           = 127.0.0.1

Reiniciar el servicio:

>~# /etc/init.d/mysql restart

Entrar en el prompt de mysql y otorgar privilegios:

>~# mysql -u root -p

Entrar la contraseña y:

mysql> GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'la_contraseña' WITH GRANT OPTION;

mysql> FLUSH PRIVILEGES;

mysql> exit

