<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[TRACTATUS ELEMENTALIS]]></title>
  <link href="https://tractatuslapipaplena.herokuapp.com/atom.xml" rel="self"/>
  <link href="https://tractatuslapipaplena.herokuapp.com/"/>
  <updated>2013-12-14T06:15:05+01:00</updated>
  <id>https://tractatuslapipaplena.herokuapp.com/</id>
  <author>
    <name><![CDATA[templix]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[awk]]></title>
    <link href="https://tractatuslapipaplena.herokuapp.com/blog/awk/"/>
    <updated>2013-12-14T06:15:00+01:00</updated>
    <id>https://tractatuslapipaplena.herokuapp.com/blog/awk</id>
    <content type="html"><![CDATA[<p>Busca patrones y los procesa. Es practicamente un lenguaje de programación.</p>

<p>Archivo base para ejemplo (Empleado &#8211; Precio/hora &#8211; Horas trabajadas – Cómo las cobra):</p>

<blockquote><p>$ cat lista</p></blockquote>

<p>Juan Gomez 6 10 banco</p>

<p>Clara Fuentes 7 12 banco</p>

<p>Antonio Cano 6 13 metálico</p>

<p>José Bueno 7 0 banco</p>

<p>Matías Crespo 5 8 metálico</p>

<p>Isabel Ruiz 7 0 metálico</p>

<p>María Monzón 9 16 metálico</p>

<p>Imprimir la segunda columna (Apellidos):</p>

<pre><code>$ awk ' { print $2 } ' lista
</code></pre>

<p>Imprimir la última columna:</p>

<pre><code>$ awk ' { print $NF } ' lista
</code></pre>

<p>Imprimir la linea 3:</p>

<pre><code>$ awk ' NR == 3 ' lista
</code></pre>

<p>Imprimir todo menos la primera columna:</p>

<pre><code>$ awk ' { $1 = "" ; print } ' lista
</code></pre>

<p>Imprimir las columnas tabuladas:</p>

<pre><code>$ awk ' { print $1 “\t” $2 “\t” $3 “\t” $4 } ' lista
</code></pre>

<p>Imprimir las lineas que tengan menos de 22 caracteres:</p>

<pre><code>$ awk 'length($0) &lt; 22' lista
</code></pre>

<p>Calcular el sueldo de los empleados que han trabajado:</p>

<pre><code>$ awk ' $4 &gt; 0 { print $1,$2, $3*$4} ' lista  
</code></pre>

<p>Personas que no han trabajado:</p>

<pre><code>$ awk ' $3 == 0 { print $1}' lista 
</code></pre>

<p>Buscar una entrada concreta:</p>

<pre><code>$ awk '/Fuentes/ { print $0 }' lista
</code></pre>

<p>Buscar los que cobran en metálico e impimir la 2ª columna:</p>

<pre><code>$ awk ' /'metálico'/ {print$2}' lista 
</code></pre>

<p>Buscar dos entradas en una misma linea separándolas con punto y coma (;):</p>

<pre><code>$ awk '/Fuentes/ { print $0 }; /Cano/ { print$0 } ' lista
</code></pre>

<p>Buscar las entradas en las que el primer campo empiece por “J”, imprimir el 2º campo y, entre parentesis el último:</p>

<pre><code>$ awk '$1 ~ /^J/ {print$2, "("$NF")"}' lista
</code></pre>

<p>Lo mismo con if:</p>

<pre><code>$ awk ' { if ($1 ~ /^J/) print$2, “(“$NF”)” }' lista
</code></pre>

<p>Añadir 5 horas al 4º campo y comprobar como quedan con la modificación:</p>

<pre><code>$ awk '{ $4 = ($4+5); print $0 }' lista
</code></pre>

<p>Añadir un nuevo campo ($6) con el producto del 3 y el 4:</p>

<pre><code>$ awk '{ $6 = ($3*$4); print $0 }' lista
</code></pre>

<p>print permite colocar texto:</p>

<pre><code>$ awk ' { print "El sueldo de ",$2," es de ",$3*$4," euros."} ' lista 
</code></pre>

<p><strong>Variables internas:</strong></p>

<p>Mostrar el número de campos de cada linea (NF):</p>

<pre><code>$ awk ' { print NF } ' lista 
</code></pre>

<p>Mostrar el número de lineas (NR):</p>

<pre><code>$ awk ' { print NR } ' lista
</code></pre>

<p>Mostrar todas las lineas completas ($0):</p>

<pre><code>$ awk ' { print $0 } ' lista 
</code></pre>

<p>Mostrar las lineas que tengan al menos un campo</p>

<pre><code>$ awk 'NF &gt; 0' lista
</code></pre>

<p>Lo mismo con if:</p>

<pre><code>$ awk '{ if (NF &gt; 0) print }' lista
</code></pre>

<p>Dar formato a la salida de datos:</p>

<pre><code>$ awk ' $4 &gt; 0 { printf "%-8s .... %8.1f euros\n",$2,($3*$4) } ' lista 

$4 &gt; 0 (Que imprima los que la 4ª columna no sea cero.)

%-8s (Que imprima una cadena (s) justificada a la izquierda (-) en un campo de 8 caracteres de ancho.)

%8.1f (Que imprima un numero real (f), en un campo de ocho caracteres de ancho, con un decimal(.))
</code></pre>

<p>Imprimir cadena, justificada a la izquierda y en campos de 10 y 5 caracteres:</p>

<blockquote><p>$ awk &#8216;{ printf &#8220;%-10s %-10s %-5s %-5s %-5s\n&#8221;, $1, $2, $3, $4, $5 }&#8217; lista</p></blockquote>

<p>Parecido con más florituras (todo en una sola linea)</p>

<pre><code>$ awk 'BEGIN {print "nombre\tapellido\tprecio\thoras\tpago"; print  "------\t--------\t------\t-----\t----"}; {print $1"\t"$2"\t"$3"\t"$4"\t"$5 }' lista
</code></pre>

<p>Lo mismo más legible:</p>

<pre><code>$ awk 'BEGIN {print "nombre\tapellido\tprecio\thoras\tpago" 

&gt;                     print "------\t--------\t------\t-----\t----"} 

&gt;                   {print  $1"\t"$2"\t"$3"\t"$4"\t"$5 }' lista
</code></pre>

<p>BEGIN y END son patrones especiales usados para suministrar al script awk qué hacer antes de empezar a procesar y después de haber procesado los registros de la entrada.:</p>

<pre><code>$ awk 'BEGIN {print “Cuantas veces aparece la palabra banco” } 

&gt;       /banco/ { ++i } 

&gt;       END   {print “banco aparece “i” veces.”}' lista 
</code></pre>

<p>Los  patrones pueden combinarse mediante los operadores lógicos AND (&amp;&amp;), OR(||) y NOT(!).</p>

<p>Imprimir los nombres de los empleados que ganan mas de 6.50 euros a la hora y que han trabajado mas de 14:</p>

<pre><code>$ awk ' $3&gt;=6.50 &amp;&amp; $4&gt;=14 { print $1,$2 } ' lista 
</code></pre>

<p>Patrones</p>

<p>buscar las lineas que contienen la cadena &#8220;banco&#8221; en el 5º campo:</p>

<pre><code>$ awk ' $5 ~ /banco/ ' lista 
</code></pre>

<p>Buscar las lineas que no contengan la cadena &#8220;banco&#8221; en el 5º campo:</p>

<pre><code>$ awk '  $5 !~ /banco/ ' lista
</code></pre>

<p>Mostrar los que el 4º campo no empiece por 0 o 1:</p>

<pre><code>$ awk ' $4 ~ /^[^01]/' lista 
</code></pre>

<p>La salida también puede pasarse a un filtro para ordenarse:</p>

<pre><code>$ awk ' { print $2 | "sort" } ' lista
</code></pre>

<p>Mostrar la linea cuyo 2º campo termina en “iz”:</p>

<pre><code>$ awk '$2 ~ /iz$/' lista 
</code></pre>

<p>Mismo concepto sin especificar si la primera letra es mayúscula o minúscula y sin conocer la segunda:</p>

<pre><code>$ awk '$1 ~ /^[Cc]./' lista
</code></pre>

<p>Mismo concepto incluyendo las que empiezan por “R”:</p>

<pre><code>$ awk '$2 ~ /^[Cc].|^[R]/' lista 
</code></pre>

<p>“tolower” convierte el campo especificado a minúsculas:</p>

<pre><code>$ awk 'tolower($1) ~ /^m/' lista     
</code></pre>

<p>Para mandar cada linea a un archivo con el nombre del 2er campo:</p>

<pre><code>$ awk ' { print &gt; $2 } ' lista
</code></pre>

<p>Mandar el primer campo a un archivo y el segundo a otro:</p>

<pre><code>$ awk '{ print $1 &gt; "nombres"; print $2 &gt; "apellidos" }' lista
</code></pre>

<p>Lo mismo pero mandándolo ordenado:</p>

<pre><code>$ awk '{ print $1 | "sort &gt; nombres"; print $2 | "sort &gt; apellidos" }' lista 
</code></pre>

<p>Indicando caracter separador (un espacio y que imprima el 2º campo):</p>

<pre><code>$ awk  -F " " ' { print $2 } ' lista 
</code></pre>

<p>Lo mismo usando BEGIN:</p>

<pre><code>$ awk 'BEGIN { FS = " " } ; { print $2 }' lista
</code></pre>

<p>El siguiente  programa  muestra  como  puede usarse awk para validación de datos.</p>

<blockquote><p>$ cat validar</p>

<p>$3 &lt; 6.5   { print $1,$2 &#8221; ===> precio por hora bajo&#8221;, &#8220;(&#8220;$3&#8221;)&#8221; }</p>

<p>$3 > 8     { print $1,$2 &#8221; ===> precio por hora alto&#8221;, &#8220;(&#8220;$3&#8221;)&#8221; }</p>

<p>$5 == &#8220;banco&#8221;    { print $1,$2 &#8221; ===> Cobra por banco&#8221; }</p>

<p>$5 == &#8220;metálico&#8221; { print $1,$2 &#8221; ===> Cobra en metálico&#8221; }</p></blockquote>

<p>Se ejecuta con:</p>

<pre><code>$ awk -f validar lista 
</code></pre>

<p>Aunque también podríamos añadir que lo ordenara por orden alfabetico del segundo campo (-k2) separado del primero por un espacio(-t” “):</p>

<pre><code>$ awk -f validar lista | sort -t” “ -k2
</code></pre>

<p>Otros ejemplos:</p>

<pre><code>$ awk '/d.[0-9]/{print $4}' /proc/partitions  (listar todas las particiones)

$ cat 1.txt | awk '{print$1”\t”$2}'  (tabulando la salida)

$ cat 1.txt | awk '!/#/{print $0}' &gt; 2.txt  (Imprime todo menos las lineas comentadas y lo manda a un archivo)

$ cat 1.txt | awk 'BEGIN { FS="\n"; RS="" } { print $1 }' &gt; lista.txt (Manda a un archivo las primeras lineas precedidas de una en blanco)

$ who | awk '{print $1}'  (Mostrar todos los usuarios registrados)

$ awk '$1~/^DocumentRoot/{print $2}' /etc/apache2/sites-available/default (conocer la carpeta del servidor)

$ awk 'BEGIN { for (i = 1; i &lt;= 7; i++) print int(101 * rand()) }' (Escribir 7 números aleatorios del 0 al 100)
</code></pre>

<p>Creación de scripts con awk:</p>

<p>1.-</p>

<p>Imprimir el simple &#8220;Hola mundo cruel&#8221;</p>

<pre><code>#! /usr/bin/awk -f 

BEGIN { print "Hola mundo cruel" } 
</code></pre>

<p>Es resultado es el mismo que tecleando:</p>

<pre><code>$ awk -f hola
</code></pre>

<p>2.-</p>

<p>Mandar el segundo campo de listado.txt a un archivo y el sexto a otro:</p>

<pre><code>#! /usr/bin/awk -f  

awk '{ print$2 &gt; "lista_nombres"

       print$6 &gt; "lista_telefonos" }' listado.txt 
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pdftotext]]></title>
    <link href="https://tractatuslapipaplena.herokuapp.com/blog/pdftotext/"/>
    <updated>2013-12-12T18:09:00+01:00</updated>
    <id>https://tractatuslapipaplena.herokuapp.com/blog/pdftotext</id>
    <content type="html"><![CDATA[<p>[xpdf-utils]</p>

<p>Para pasar un pdf a txt o a html.</p>

<blockquote><p>$ pdftotext -listenc (Lista las codificaciones soportadas)</p>

<p>$ pdftotext -layout texto.pdf texto.txt</p>

<p>$ pdftotext -htmlmeta texto.pdf text.html</p>

<p>$ pdftotext -enc UTF-8 -htmlmeta texto.pdf texto.html (Especificando una codificación)</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[avconv]]></title>
    <link href="https://tractatuslapipaplena.herokuapp.com/blog/avconv/"/>
    <updated>2013-12-12T14:36:00+01:00</updated>
    <id>https://tractatuslapipaplena.herokuapp.com/blog/avconv</id>
    <content type="html"><![CDATA[<p>Información sobre archivos multimedia y conversión de formatos.</p>

<blockquote><p>$ avconv -i video.avi video.mpeg  (Pasar de avi a mpeg)</p>

<p>$ avconv -i video.avi (Información sobre un archivo)</p>

<p>$ avconv -i archivo.avi -an nuevo.avi (Sacar el sonido de un avi)</p></blockquote>

<p>1.-</p>

<p>Convertir varios archivos mp4 a mp3:</p>

<pre><code>#!/bin/bash

for i in *.mp4

do

        avconv -i "$i" -b 256k "${i%.mp4}.mp3"

done
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ipmitool]]></title>
    <link href="https://tractatuslapipaplena.herokuapp.com/blog/ipmitool/"/>
    <updated>2013-12-12T14:20:00+01:00</updated>
    <id>https://tractatuslapipaplena.herokuapp.com/blog/ipmitool</id>
    <content type="html"><![CDATA[<p>[openipmi]</p>

<p>Obtener datos del estado de un servidor [que lo soporte] tanto en local desde el propio servidor cómo en remoto. Se trata de un chipset que permite obtener información del estado de diferentes componentes hardware, temperaturas, voltajes, etc&#8230; Primero habilitar el demon ipmievd:</p>

<blockquote><p># nano /etc/default/ipmievd</p></blockquote>

<p>Y modificar la linea:</p>

<p>ENABLED=true</p>

<p>En algunas distros es preciso cargar los módulos:</p>

<pre><code># ipmi_msghandler

# ipmi_si

# ipmi_devintf

# ipmi_watchdog

# ipmi_poweroff
</code></pre>

<blockquote><p># /etc/init.d/ipmi start (Arrancar el servicio)</p>

<p># ipmitool sensor get &#8220;Ambient Temp&#8221; (Consulta de la temperatura ambiente)</p>

<p># ipmitool user list (Listado de usuarios configurados)</p>

<p># ipmitool -I lan -H 192.168.1.5 -U usuario sel elist (Litar los logs del sistema)</p>

<p># ipmitool -H 192.168.1.10 -U usuario -P contraseña chassis status (Estado de chasis remoto)</p>

<p># ipmitool sdr type Temperature (Obtener la temperatura)</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[tmux]]></title>
    <link href="https://tractatuslapipaplena.herokuapp.com/blog/tmux/"/>
    <updated>2013-12-10T19:53:00+01:00</updated>
    <id>https://tractatuslapipaplena.herokuapp.com/blog/tmux</id>
    <content type="html"><![CDATA[<p>Terminal multiplexor</p>

<blockquote><p>$ tmux (Lanzar la aplicación)</p>

<p>$ tmux ls (Listar las sesiones tmux abiertas)</p>

<p>$ tmux attach -t 0 (Sincronizarse con la sesión 0 [attach] en local o en remoto via ssh)</p>

<p>$ tmux rename-session -t 0 tty1 (Renombrar la sesion 0 a tty1)</p>

<p>$ tmux kill-window -t 2 (Matar la sesión tmux número 2)</p>

<p>$ tmux new-session -s hack_wifi (Abrir sesión con un nombre)</p>

<p>$ tmux list-commands (Listar la sintaxis de todos los comandos soportados)</p>

<p>$ tmux list-keys (Listado de todas las teclas de control)</p>

<p>$ tmux new-session -d &#8216;vi /etc/apt/sources.list&#8217; \; split-window -d &#8216;newsbeuter&#8217; \; attach (Arrancar una sesión tmux con el sources.list en el panel superior y con el lector RSS newsbeuter en el inferior)</p>

<p>$ tmux new-session \; split-window \; split-window -h \; split-window -v \; attach (Arrancar la aplicación con varios panels horizontales y verticales)</p></blockquote>

<p>Un completo tutorial en: <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=tmux&amp;sektion=1">http://www.openbsd.org/cgi-bin/man.cgi?query=tmux&amp;sektion=1</a></p>

<p>Atajos:</p>

<pre><code>Ctrl+b c (Crear una nueva ventana)

Ctrl+b d (Salir de tmux actual (detach) sin cerrar sesión)

Ctrl+b n (Ir a la ventana siguiente)

Ctrl+b p (Ir a la ventana anterior)

Ctrl+b &amp; (Matar la ventana actual, incluye todos los paneles)

Ctrl+b x (Matar panel actual)

Ctrl+b , (cambiar el nombre de la ventana actual )

Ctrl+b % (Dividir verticalmente la ventana actual en dos paneles)

Ctrl+b " (Dividir horizontalmente la ventana actual en dos paneles)

Ctrl+b q (Mostrar brevemente los números de cada panel)

Ctrl+b o (Cambiar al siguiente panel)

Ctrl+b ? (Lista todas las combinaciones de teclas de control)

Ctrl+b w (Lista todas las ventanas)

Ctrl+b núm (Moverse a la ventana seleccionada (0-9). No al panel)

Ctrl+b up (Ir al panel de encima)

Ctrl+b down (Ir al panel de abajo)

Ctrl+b left (Ir al panel de la izquierda)

Ctrl+b right (Ir al panel de la derecha)

Ctrl+b t (Muestra en el panel un reloj digital)

Ctrl+b s (Elegir sesión)

Ctrl+b [ (Entra en modo scroll con la teclas del cursor. Termina pulsando q)
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rkhunter]]></title>
    <link href="https://tractatuslapipaplena.herokuapp.com/blog/rkhunter/"/>
    <updated>2013-12-08T18:54:00+01:00</updated>
    <id>https://tractatuslapipaplena.herokuapp.com/blog/rkhunter</id>
    <content type="html"><![CDATA[<p>Buscador de rootkits instalados en el sistema</p>

<blockquote><p># rkhunter &#8211;update  (Recargar la base de datos)</p>

<p># rkhunter -c  (iniciar la aplicación)</p>

<p># rkhunter -c -sk (iniciar la aplicación sin pedir confirmación para proseguir)</p>

<p># rkhunter -c -sk &#8211;propupd (Lanzar con la opción &#8220;propupd&#8221; si se ha modificado la función Hash o para reconstruir la base de datos y evitar &#8220;Warnings&#8221; tipo: Warning: The file properties have changed)</p>

<p># rkhunter &#8211;list (Ver las opciones)</p>

<p># rkhunter &#8211;enable group_accounts,system_commands  (Solo chequear estas dos opciones)</p>

<p># rkhunter &#8211;disable shared_libs  (Descartar esta opción del chequeo)</p>

<p># cat /var/log/rkhunter.log | grep Warning (Visualizar los &#8220;Warnings&#8221;)</p></blockquote>

<p>1.-</p>

<p>Para solucionar el error: Warning: Hidden directory found: /etc/.java</p>

<blockquote><p># nano /etc/rkhunter.conf</p></blockquote>

<p>Y descomentar la linea:</p>

<p>ALLOWHIDDENDIR=&#8221;/etc/.java&#8221;</p>

<p>Nota.- para errores similares con archivos ocultos [/dev/.udev, /dev/.initramfs&#8230; ], descomentar la linea correspondiente.</p>

<p>2.-</p>

<p>Para errores de versión de ciertas aplicaciones [Warning: Application &#8216;gpg&#8217;, version &#8230;.]</p>

<blockquote><p># nano /etc/rkhunter.conf</p></blockquote>

<p>Añadir apps a la linea:</p>

<p>DISABLE_TESTS=&#8221;suspscan hidden_procs deleted_files packet_cap_apps apps&#8221;</p>

<p>3.-</p>

<p>Para suprimir falsa advertencias sobre posibles interfaces promiscuos [P.ejemplo de un servidor virtual], añadir &#8220;promisc&#8221; a la opción DISABLE_TESTS:</p>

<p>DISABLE_TESTS=&#8221;suspscan hidden_procs deleted_files packet_cap_apps apps promisc&#8221;</p>

<p>4.-</p>

<p>Para que los valores se obtengan del gestor de paquetes correspondiente:</p>

<blockquote><p># nano /etc/rkhunter.conf</p></blockquote>

<p>Y descomentar y modificar la linea PKGMGR:</p>

<p>PKGMGR=DPKG</p>

<p>Nota.- Otras opciones para distros no debian o para desactivar la opción: RPM, BSD,SOLARIS y NONE</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ssconvert]]></title>
    <link href="https://tractatuslapipaplena.herokuapp.com/blog/ssconvert/"/>
    <updated>2013-12-07T06:26:00+01:00</updated>
    <id>https://tractatuslapipaplena.herokuapp.com/blog/ssconvert</id>
    <content type="html"><![CDATA[<p>[gnumeric]</p>

<p>Conversor de formatos de hoja de cálculo por línea de comandos.</p>

<blockquote><p>$ ssconvert &#8211;list-exporters (Listado de conversiones de salida)</p>

<p>$ ssconvert &#8211;list-importers (Litado de conversiones de entrada)</p>

<p>$ ssconvert entrada.xls salida.csv (De formato excel a csv)</p>

<p>$ ssconvert -E utf-8 entrada.xls salida.csv (Especificando una codificación para la salida)</p>

<p>$ ssconvert &#8211;export-type=Gnumeric_stf:stf_assistant -O &#8216;separator=| format=preserve charset=unicode&#8217; entrada.xls salida.csv (Especificando opcionalmente un exportador [&#8211;export-type] que permite exportar a txt, especificando un separador de campos que no sea el por defecto [el espacio] sinó la barra vertical [|], preservando el formato de las celdas del original [format], otras opciones de format son &#8220;automatic&#8221; [por defecto] y &#8220;raw&#8221; [sin formato] y con codificación de salida en unicode [por defecto UTF-8])</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[while]]></title>
    <link href="https://tractatuslapipaplena.herokuapp.com/blog/while/"/>
    <updated>2013-12-07T06:00:00+01:00</updated>
    <id>https://tractatuslapipaplena.herokuapp.com/blog/while</id>
    <content type="html"><![CDATA[<p>Ejecuta una seria de comandos mientras que una determinada condicion sea cumpla. Algunos scripts ilustrativos:</p>

<p>1.-</p>

<pre><code>#!/bin/bash

RESPUESTA=s

while [ $RESPUESTA = s ]

do

    echo "Introducir nombre: "

    read NOMBRE

    echo "Hola $NOMBRE"

    echo

    echo "¿Desea continuar? (s/n)"

    read RESPUESTA

done
</code></pre>

<p>2.-</p>

<pre><code>#!/bin/bash

while [ "$OPCION" != 5 ]

do

    echo

    echo "[1] Listar directorio"

    echo "[2] Directorio donde te encuentras"

    echo "[3] fecha de hoy"

    echo "[4] Usuarios conectados"

    echo "[5] Salir"

    echo

    read -p "Ingrese una opción: " OPCION

    echo

    case $OPCION in

        1) ls;;

        2) pwd;;

        3) date +%D ;;

        4) who;;

        5);;

        *) echo "Opción ingresada no valida, intentelo de nuevo";;

    esac

done

exit 0
</code></pre>

<p>3.-</p>

<pre><code>#!/bin/bash

# imprimir números del 1 al 10

LIMITE=10

a=1

while [ "$a" -le $LIMITE ]

do

  echo "$a "

  let "a+=1"

done
</code></pre>

<p>4.-</p>

<p>Leer un archivo linea a linea:</p>

<pre><code>#!/bin/bash

while read linea

do

   echo "---&gt; $linea "

done &lt; archivo.txt
</code></pre>

<p>5.-</p>

<p>Especificando un separador [:]</p>

<pre><code>#!/bin/bash

while IFS=: read user pass uid gid full home shell

do

echo -e "$full :\n\

        Pseudo : $user\n\

        UID :\t $uid\n\

        GID :\t $gid\n\

        Home :\t $home\n\

        Shell :\t $shell\n\n"

done &lt; /etc/passwd
</code></pre>

<p>6.-</p>

<p>Leer un archivo pasado como parámetro, descartar las lineas en blanco y colorear alternativamente las siguientes en amarillo y rojo.</p>

<pre><code>#!/bin/bash

COLOR=1

while read linia

do

    if [ -z "${linia}" ] 

    then

        continue

    fi

    if [ $COLOR -eq 0 ]

    then

        echo -e "\e[1;30;41m$linia\033[0m" #VERMELL - 0

        COLOR=1

    else

        echo -e "\e[1;30;43m$linia\033[0m" #GROC - 1

        COLOR=0

    fi

done &lt; $1
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[unoconv]]></title>
    <link href="https://tractatuslapipaplena.herokuapp.com/blog/unoconv/"/>
    <updated>2013-12-07T06:00:00+01:00</updated>
    <id>https://tractatuslapipaplena.herokuapp.com/blog/unoconv</id>
    <content type="html"><![CDATA[<p>Exporta todos los formatos soportados por openoffice/libreoffice a otros formatos como pdf, txt&#8230; creando un archivo con el mismo nombre de origen pero con la nueva extensión. Para una lista detallada consultar este enlace: <a href="http://dag.wieers.com/home-made/unoconv/">http://dag.wieers.com/home-made/unoconv/</a></p>

<blockquote><p>$ unoconv &#8211;show  (Visualizar formatos  soportados)</p>

<p>$ unoconv -f xls archivo.csv (convertir un csv a xls)</p>

<p>$ unoconv -f pdf <em>.odp </em>.odt (Convierte todos los .odt y .odp a pdfs)</p>

<p>$ unoconv &#8211;format=txt document1.odt (convierte el documento a texto plano)</p>

<p>$ unoconv &#8211;format=txt &#8211;stdout document1.odt > salida.txt (envia la salida al STDOUT para redireccionarla a un fichero cualquiera)</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hash-identifier]]></title>
    <link href="https://tractatuslapipaplena.herokuapp.com/blog/hash-identifier/"/>
    <updated>2013-12-07T06:00:00+01:00</updated>
    <id>https://tractatuslapipaplena.herokuapp.com/blog/hash-identifier</id>
    <content type="html"><![CDATA[<p>Identifica la encriptación de un hash. Descarga: <a href="https://code.google.com/p/hash-identifier/">https://code.google.com/p/hash-identifier/</a></p>

<blockquote><p>$ python Hash_ID_v1.1.py</p></blockquote>

<p>Cuando sale el promt pastear el hash:</p>

<p>HASH: caf90169eefa5f807d577486b9f795ab86ae2983c5c20806cff959117e90af18</p>

<pre><code>Possible Hashs:

[+]  SHA-256

[+]  Haval-256

Least Possible Hashs:

[+]  GOST R 34.11-94

[+]  RipeMD-256

[+]  SNEFRU-256

[+]  SHA-256(HMAC)

[+]  Haval-256(HMAC)

[+]  RipeMD-256(HMAC)

[+]  SNEFRU-256(HMAC)

[+]  SHA-256(md5($pass))

[+]  SHA-256(sha1($pass))
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cmus]]></title>
    <link href="https://tractatuslapipaplena.herokuapp.com/blog/cmus/"/>
    <updated>2013-12-01T07:02:00+01:00</updated>
    <id>https://tractatuslapipaplena.herokuapp.com/blog/cmus</id>
    <content type="html"><![CDATA[<p>Reproductor de música.</p>

<blockquote><p>$ cmus &#8211;plugins (Listado de plugins disponibles)</p>

<p>$ cmus</p></blockquote>

<p>Algunas teclas de control:</p>

<pre><code>1 (Muestra la biblioteca)

2 (Muestra la biblioteca ordenada según los criterios del usuario)

4 (Muestra la cola de pistas que se reproducirá)

5 (Navegar por los directorios)

7 (Muestra todas las teclas de control)

+ (Sube el volumen un 10%)

- (Baja el volumen un 10%)

a (Añadir canción al listado)

b (siguiente canción)

c (Pausar la reproducción

i (Estando con la opción 5, muestra los directorios ocultos)

r (Repetir canción)

q (salir)
</code></pre>

<p>Listado de temas de colores disponibles en /usr/share/cmus. Para modificar el el esquema de colores:</p>

<pre><code>: colorscheme cyan
</code></pre>

<p>Para que el cambio sea permanente:</p>

<blockquote><p>$ nano .cmus/rc</p></blockquote>

<p>Y colocar la linea:</p>

<p>colorscheme cyan</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cansina]]></title>
    <link href="https://tractatuslapipaplena.herokuapp.com/blog/cansina/"/>
    <updated>2013-12-01T05:53:00+01:00</updated>
    <id>https://tractatuslapipaplena.herokuapp.com/blog/cansina</id>
    <content type="html"><![CDATA[<p>Trata de descubrir directorios ocultos en los que poder encontrar información útil. Descarga:</p>

<blockquote><p>$ git clone https://github.com/deibit/cansina</p>

<p># python cansina.py -h (Ayuda)</p>

<p># python cansina.py -u URL -p fuzzdb/attack-payloads/all-attacks/all-attacks-unix.txt (Los parámetros mínimos son la URL y el peyload a usar)</p></blockquote>

<p>Una vez lanzado el fuzzer, crea un archivo .sqlite en el directorio data que puede convertirse en .html con:</p>

<blockquote><p>$ python viewer.py -p data/URL.sqlite</p></blockquote>

<p>Y visualizarse en cualquier navegador.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[tcptrack]]></title>
    <link href="https://tractatuslapipaplena.herokuapp.com/blog/tcptrack/"/>
    <updated>2013-11-29T21:43:00+01:00</updated>
    <id>https://tractatuslapipaplena.herokuapp.com/blog/tcptrack</id>
    <content type="html"><![CDATA[<p>aplicación que muestra el consumo de la conexión.</p>

<blockquote><p># tcptrack -i eth1 port 22 -f (Especificando conexión, puerto y habilitar el algoritmo de velocidad media rápida [-f])</p>

<p># tcptrack -i eth1 port 21 or 80 (Especificando dos puertos)</p>

<p># tcptrack -i eth0 &#8220;dst port 80&#8221; (Sólo mostrar las conexiones destinadas al puerto 80)</p>

<p># tcptrack -i eth1 -r 10 -d (Mostrar las conexiones 10 segundos más de cuando se cierren, por defecto son 2 segundo [r] y sin rastrear las conexiones existentes [d])</p>

<p># tcptrack -T network.pcap > network.txt (Mandando el resultado a un archivo [-T])</p></blockquote>

<p>Algunas teclas de control:</p>

<p>p (Pausar)</p>

<p>q (salir)</p>

<p>s (Cada vez que se pulsa la letra cambia a alguna de las 3 opciones de ordenación: sin ordenar (por defecto), por categoría y por bytes)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ipband]]></title>
    <link href="https://tractatuslapipaplena.herokuapp.com/blog/ipband/"/>
    <updated>2013-11-29T21:43:00+01:00</updated>
    <id>https://tractatuslapipaplena.herokuapp.com/blog/ipband</id>
    <content type="html"><![CDATA[<p>Mostrar datos de la conexión. Copiar el arxivo de configuración:</p>

<blockquote><p># cp /usr/share/doc/ipband/examples/ipband.conf-simple /etc/ipband.conf</p></blockquote>

<p>Y descomentar o modificar los siguientes parámetros:</p>

<pre><code>debug 0

interface eth1

fork yes

htmlfile /srv/www/htdocs/ipbandwidth/index.html

htmltitle Consumo de banda

average 10

accumulate no

maskbits 32

localrange 192.168.1.0/24
</code></pre>

<p>Reiniciar el servicio:</p>

<blockquote><p># /etc/init.d/ipband restart</p></blockquote>

<p>Arrancar la aplicación:</p>

<blockquote><p># ipband</p></blockquote>

<p>Los informes se muestran poniendo en la barra del navegador: http://localhost/html/ipbandwidth/index.html</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hashtag]]></title>
    <link href="https://tractatuslapipaplena.herokuapp.com/blog/hashtag/"/>
    <updated>2013-11-28T15:08:00+01:00</updated>
    <id>https://tractatuslapipaplena.herokuapp.com/blog/hashtag</id>
    <content type="html"><![CDATA[<p>Analiza e identifica varios hashes de contraseñas en función de su tipo. Descarga de <a href="https://github.com/SmeegeSec/HashTag">https://github.com/SmeegeSec/HashTag</a></p>

<blockquote><p># hashtag -sh $1$MtCReiOj$zvOdxVzPtrQ.PXNW3hTHI0 (Analizar uno sólo)</p>

<p># hashtag -f archivo (Analizar todos los hash contenidos en un archivo)</p>

<p># hashtag -d dir -o archivo (recorrer un directorio y todos los subdirectorios intentando identificar todos los hash potenciales y mandando el resultado a un archivo. Si no se especifica, la salida es HashTag_Output_File.txt)</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ifs]]></title>
    <link href="https://tractatuslapipaplena.herokuapp.com/blog/ifs/"/>
    <updated>2013-11-27T21:21:00+01:00</updated>
    <id>https://tractatuslapipaplena.herokuapp.com/blog/ifs</id>
    <content type="html"><![CDATA[<p>Internal Field Separator (separador de campos internos) sirve para indicar cual es el valor que se usa como separador. Si no se especifica ninguno es el espacio.</p>

<p>Algunos ejemplos:</p>

<p>1.-</p>

<pre><code>#!/bin/bash

# dividir una IP en 4 variables

# Guardar el separador de campos original

OLDIFS=$IFS

read -p "Dime la ip: " IP

# Establecemos el separador de campos en el punto

IFS=.

read IP1 IP2 IP3 IP4 &lt;&lt;&lt; "$IP"

echo "$IP1 $IP2 $IP3 $IP4"

# Restablecemos el separador original (El espacio)

IFS=$OLDIFS
</code></pre>

<p>2.-</p>

<pre><code>#!/bin/bash

#Almacenamos el valor original de la variable IFS

OLDIFS=$IFS

#Cambiamos el valor del IFS a final de linea [\n]

IFS=$'\n'

for line in $(cat file.txt)

do

    echo $line

done

#Restauramos el IFS

IFS=$OLDIFS
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[chmod]]></title>
    <link href="https://tractatuslapipaplena.herokuapp.com/blog/chmod/"/>
    <updated>2013-11-25T21:10:00+01:00</updated>
    <id>https://tractatuslapipaplena.herokuapp.com/blog/chmod</id>
    <content type="html"><![CDATA[<p>Gestión de permisos de los ficheros y directorios.</p>

<blockquote><p>$ chmod ugo+rwx -R /home/usuario/directorio  (todos los permisos a todos los usuarios sobre el directorio y subdirectorios)</p>

<p>$ chmod 777 -R /home/usuario/directorio (Equivalente en octal)</p>

<p>$ chmod a+w archivo (permiso de escritura para todos)</p>

<p>$ chmod 222 -R /home/usuario/directorio (Equivalente en octal)</p>

<p>$ chmod -w archivo (Quitar permiso de escritura a un archivo)</p>

<p>$ chmod +x archivo (Dar permiso de ejecución)</p>

<p>$ chmod 744 archivo (Lectura, ecritura y ejecución para el usuario y sólo lectura para grupo y otros)</p>

<p>$ chmod u=rwx go=rw archivo (Equivalente en alfabético)</p>

<p>$ chmod &#8211;reference=file1 file2 (Otorgar los mismos permisos de file1 a file2)</p></blockquote>

<p>Código numérico (octal):</p>

<pre><code>1 = ejecución [x]

2 = escritura [w]

3 (1+2) = escritura y ejecución [xw]

4 = lectura [r]

5 (4+1) = lectura y ejecución [rx]

6 (4+2) = lectura y escritura [rw]

7 (4+2+1) = lectura, escritura y ejecución [wxr]
</code></pre>

<p>Código alfabético:</p>

<p>r (lectura), w (escritura), x (ejecución)</p>

<p>u (usuario), g (grupo), o (otros), a (para todos)</p>

<p>Nota.- Cuando un directorio está marcado como ejecutable [x] significa que se puede mirar dentro [ls] o entrar en él [cd]</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[aide]]></title>
    <link href="https://tractatuslapipaplena.herokuapp.com/blog/aide/"/>
    <updated>2013-11-24T16:44:00+01:00</updated>
    <id>https://tractatuslapipaplena.herokuapp.com/blog/aide</id>
    <content type="html"><![CDATA[<p>Sistema de detección de intrusos. No evita la intrusión, sólo informa que esta se ha producido y qué archivos fueron modificados. La primera vez que se ejecuta, crea una base de datos con los atributos, usuarios, permisos&#8230; de los archivos especificados aplicándoles una o varias funciones hash por lo que el mejor momento para instalar esta aplicación es con un sistema recien instalado.</p>

<blockquote><p># aide -i (Crear la base de datos)</p>

<p># aide -u (Actualizar la base de datos)</p>

<p># aide -c (Hacer un chequeo del sistema para comprobar modificaciones)</p></blockquote>

<p>Nota.- Los archivos de configuración: /etc/aide/aide.conf.d/, /etc/aide/aide.conf y /etc/default/aide</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[miniflux]]></title>
    <link href="https://tractatuslapipaplena.herokuapp.com/blog/miniflux/"/>
    <updated>2013-11-24T15:42:00+01:00</updated>
    <id>https://tractatuslapipaplena.herokuapp.com/blog/miniflux</id>
    <content type="html"><![CDATA[<p>Lector RSS instalado en local o en un servidor. Simplemente se descarga la aplicación de <a href="http://miniflux.net/">http://miniflux.net/</a> y, una vez descomprimida, se copia al directorio web (generalmente /var/www). Se accede colocando en la barra de direcciones: http://localhost/miniflux (Por defecto el nombre de usuario y contraseña son admin:admin)</p>

<p>Atajos de teclado:</p>

<p>gu (Ir a leídas)</p>

<p>gb (Ir a marcadores)</p>

<p>gh (Ir al historial)</p>

<p>gs (Ir a suscripciones)</p>

<p>gp (Ir a preferencias)</p>

<p>s (Descargar contenido)</p>

<p>p (Noticia anterior)</p>

<p>n (Noticia siguiente)</p>

<p>m (Marcar como leido)</p>

<p>v (Abrir la noticia original)</p>

<p>o (Desplegar la noticia)</p>

<p>f (Añadir a favoritos)</p>

<p>h (Ir a página precedente)</p>

<p>l (Ir a página anterior)</p>

<p>? (Abrir la ayuda de los atajos de teclado)</p>

<p>q (Cerrar la ayuda)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[noip2]]></title>
    <link href="https://tractatuslapipaplena.herokuapp.com/blog/noip2/"/>
    <updated>2013-11-22T17:15:00+01:00</updated>
    <id>https://tractatuslapipaplena.herokuapp.com/blog/noip2</id>
    <content type="html"><![CDATA[<p>Servicio de redireccionamiento de ip dinamica a fija. Requiere registro en www.no-ip.com</p>

<blockquote><p># noip2 -C    (Inicio de la configuración del servicio)</p></blockquote>

<pre><code>Please enter the login/email string for no-ip.com (usuario registro no-ip.com) 

Please enter the password for user ‘usuario@email.com’ (Contraseña no-ip) 

Please enter an update interval:[30] (Intervalo de tiempo para actualización) 

Do you wish to run something at successful update?[N] (y/N)  (intro) 

New configuration file ‘/etc/no-ip2.conf’ created.
</code></pre>

<blockquote><p># ps aux | grep noip (Comprobar si está corriendo el servicio)</p>

<p># noip2 -S (Muestra información sobre el proceso activo)</p>

<p># noip2 -K 1234 (Mata el proceso de noip con el número que le indiquemos)</p>

<p># noip2 -M (permite multiple instancias de noip2)</p>

<p># noip2 -i 192.168.1.2 (Forzar a que noip2 actualice los dominios con la IP suministrada)</p>

<p># noip2 -I eth1 (Forzar que noip2 se conecte a internet con la tarjeta de red especificada)</p></blockquote>

<p>Nota.- En algunas distros, para iniciar el servicio al inicio:</p>

<blockquote><p># nano /etc/rc.local</p></blockquote>

<p>Y colocar, según donde se encuentre el ejecutable, la linea:</p>

<p>/usr/local/bin/noip2 &amp;</p>
]]></content>
  </entry>
  
</feed>
